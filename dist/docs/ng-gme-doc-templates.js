angular.module("gme.docs.templates", []).run(["$templateCache", function($templateCache) {$templateCache.put("/docs/docs_index.html","<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>ngGME Documentation</title>\r\n\r\n    <link href=\'http://fonts.googleapis.com/css?family=Arimo:400,700,400italic,700italic\' rel=\'stylesheet\' type=\'text/css\'>\r\n\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"https://code.jquery.com/ui/1.11.1/themes/black-tie/jquery-ui.css\">\r\n    <link type=\"text/css\" href=\"//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css\" rel=\"stylesheet\">\r\n\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"libs/isis-ui-components.css\">\r\n\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"libs/ng-grid.min.css\">\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"libs/ng-tags-input.bootstrap.min.css\">\r\n\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"ng-gme-docs.css\">\r\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"libs/ng-gme.css\">\r\n\r\n</head>\r\n<body ng-cloak>\r\n<div ng-controller=\"UIComponentsDemoController\" class=\"container\">\r\n\r\n    <h1>ngGME</h1>\r\n\r\n    <section ng-repeat=\"component in components\" id=\"{{ component.name }}\">\r\n        <div class=\"page-header\">\r\n            <h1>{{ component.name }}\r\n                <small>(isis.ui.{{ component.name }})</small>\r\n            </h1>\r\n        </div>\r\n\r\n        <div class=\"row demo-piece-container\">\r\n            <div class=\"col-md-12 show-grid\" ng-include=\"component.template\">\r\n\r\n            </div>\r\n        </div>\r\n            <div class=\"row\">\r\n                <tabset class=\"col-md-12\" ng-if=\"component.sources\">\r\n                    <tab heading=\"Documentation\">\r\n                        <div class=\"docs-container\" btf-markdown ng-include=\"component.docs\">\r\n                        </div>\r\n                    </tab>\r\n                    <tab ng-repeat=\"sourceFile in component.sources\"\r\n                         heading=\"{{sourceFile.fileName}}\"\r\n                         select=\"selectedSourceFile=sourceFile\">\r\n                        <div ui-codemirror\r\n                             ui-codemirror-opts=\"sourceFile.viewerOptions\"\r\n                             ng-model=\"sourceFile.code\"\r\n                             ui-refresh=\"selectedSourceFile\"\r\n                             >\r\n\r\n                        </div>\r\n                    </tab>\r\n                </tabset>\r\n            </div>\r\n\r\n    </section>\r\n\r\n</div>\r\n<script src=\"https://code.jquery.com/jquery-2.1.1.min.js\"></script>\r\n<script src=\"https://code.jquery.com/ui/1.11.1/jquery-ui.min.js\"></script>\r\n\r\n<script src=\"libs/chance.js\"></script>\r\n\r\n<script src=\"libs/webgme.classes.build.js\"></script>\r\n\r\n<script src=\"libs/angular.min.js\"></script>\r\n<script src=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js\"></script>\r\n<script src=\"http://cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.10.0/ui-bootstrap-tpls.js\"></script>\r\n\r\n<script src=\"libs/isis-ui-components.js\"></script>\r\n<script src=\"libs/isis-ui-components-templates.js\"></script>\r\n\r\n<script src=\"libs/ng-grid-2.0.14.min.js\"></script>\r\n<script src=\"libs/ui-utils.min.js\"></script>\r\n\r\n<script src=\"libs/ng-tags-input.min.js\"></script>\r\n\r\n<script src=\"libs/ng-gme.js\"></script>\r\n<script src=\"libs/ng-gme-templates.js\"></script>\r\n\r\n<script src=\"ng-gme-docs.js\"></script>\r\n<script src=\"ng-gme-doc-templates.js\"></script>\r\n\r\n<script type=\"text/javascript\">\r\n    var clientLoaded,\r\n            timeout = 5000, // 10 seconds\r\n            waitCounter = 0,\r\n            i,\r\n            success,\r\n            usedClasses = [\'Client\'],\r\n            interval = 200, // 100 milliseconds interval\r\n            waitForLoadId = setInterval(function () {\r\n                if (window.WebGMEGlobal &&\r\n                    window.WebGMEGlobal.classes) {\r\n                    // TODO: check for all classes that we use\r\n                    clearInterval(waitForLoadId);\r\n                    success = true;\r\n                    for (i = 0; i < usedClasses.length; i += 1) {\r\n                        if (window.WebGMEGlobal.classes.hasOwnProperty(usedClasses[i])) {\r\n                            console.log(\'WebGME \' + usedClasses[i] + \' is available.\');\r\n                        } else {\r\n                            console.error(\'WebGME \' + usedClasses[i] + \' was not found.\');\r\n                            success = false;\r\n                        }\r\n                    }\r\n                    if (success) {\r\n                        console.log(\'WebGME client library is ready to use.\');\r\n                        clientLoaded();\r\n                    }\r\n                } else {\r\n                    console.log(\'Waiting for WebGME client library to load.\');\r\n                    waitCounter += 1;\r\n                    if (waitCounter >= timeout / interval) {\r\n                        clearInterval(waitForLoadId);\r\n                        console.error(\'WebGME client library was not loaded within a reasonable time. (\' + (timeout / 1000) + \' s)\');\r\n                    }\r\n                }\r\n            }, interval);\r\n    clientLoaded = function () {\r\n        // main entry point of the app.js\r\n        // once the webgme Client is loaded and ready we can use it.\r\n        angular.bootstrap(document, [\'gme.demoApp\']);\r\n    };\r\n</script>\r\n\r\n</body>\r\n</html>\r\n");
$templateCache.put("/library/directives/projectBrowser/docs/demo.html","<div data-ng-controller=\"ProjectBrowserDemoController\" style=\"height: 700px; overflow-x:auto; padding: 0 1ex;\">\r\n    <project-browser></project-browser>\r\n</div>");
$templateCache.put("/library/services/projectService/docs/demo.html","<div data-ng-controller=\"ProjectServiceDemoController\" style=\"height: 700px; overflow-x:auto; padding: 0 1ex;\">\r\n\r\n  <ul>\r\n    <li><b>Available projects</b>\r\n      <ul>\r\n        <li ng-repeat=\'project in projects\'><i>Project Name (and Id):</i> {{ project.info.visibleName }} ({{ project.id }})\r\n          <ul>\r\n            <li>Description: {{ project.info.description }}</li>\r\n            <li>Tags: <span ng-repeat=\'tag in project.info.tags\'>{{ tag }}; </span></li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </li>\r\n    <li><b>Available tags</b>\r\n      <ul>\r\n        <li ng-repeat=\'tag in tags\'><i>{{tag.id }}:</i> {{ tag.name }}\r\n        </li>\r\n      </ul>\r\n    </li>\r\n  </ul>\r\n\r\n</div>\r\n");
$templateCache.put("/docs/docs_app.js","/*globals angular, require, Chance*/\r\n\'use strict\';\r\n\r\nvar directiveComponents, serviceComponents;\r\n\r\ndirectiveComponents = [ {\r\n    name: \'projectBrowser\',\r\n    sources: [ \'demo.html\', \'demo.js\' ]\r\n} ];\r\n\r\nserviceComponents = [ {\r\n    name: \'projectService\',\r\n    sources: [ \'demo.html\', \'demo.js\' ]\r\n} ];\r\n\r\nwindow.chance = new Chance();\r\n\r\nrequire( \'../library/ng-gme.js\' );\r\nrequire( \'../library/directives/projectBrowser/docs/demo.js\' );\r\nrequire( \'../library/services/projectService/docs/demo.js\' );\r\n\r\n\r\nrequire( \'angular-sanitize\' );\r\nwindow.Showdown = require( \'showdown\' );\r\nrequire( \'angular-markdown-directive\' );\r\n\r\nrequire( \'codemirror-css\' );\r\nwindow.CodeMirror = require( \'codemirror\' );\r\n\r\nrequire( \'codemirror/mode/htmlmixed/htmlmixed\' );\r\nrequire( \'codemirror/mode/xml/xml\' );\r\nrequire( \'codemirror/mode/javascript/javascript\' );\r\n\r\nrequire( \'angular-ui-codemirror\' );\r\n//require( \'ng-grid\' );\r\n//require( \'ng-grid-css\');\r\nrequire( \'ui-utils\' );\r\n\r\n\r\nvar demoApp = angular.module(\r\n    \'gme.demoApp\', [\r\n        \'gme.docs.templates\',\r\n        \'btford.markdown\',\r\n        \'ui.codemirror\',\r\n        \'ui.bootstrap\'\r\n    ].concat( directiveComponents.map( function ( e ) {\r\n        return \'gme.\' + e.name + \'.demo\';\r\n    } ) )\r\n    .concat( serviceComponents.map( function ( e ) {\r\n        return \'gme.\' + e.name + \'.demo\';\r\n    } ) )\r\n);\r\n\r\ndemoApp.run( function () {\r\n    console.log( \'DemoApp run...\' );\r\n\r\n} );\r\n\r\ndemoApp.controller(\r\n    \'UIComponentsDemoController\',\r\n    function ( $scope, $templateCache ) {\r\n\r\n        var fileExtensionRE,\r\n            codeMirrorModes;\r\n\r\n        fileExtensionRE = /(?:\\.([^.]+))?$/;\r\n\r\n        codeMirrorModes = {\r\n            \'js\': \'javascript\',\r\n            \'html\': \'htmlmixed\'\r\n        };\r\n\r\n        $scope.components = directiveComponents.map( function ( component ) {\r\n            var sources,\r\n                viewerOptions,\r\n                fileExtension;\r\n\r\n            if ( angular.isArray( component.sources ) ) {\r\n                sources = component.sources.map( function ( sourceFile ) {\r\n\r\n                    fileExtension = fileExtensionRE.exec( sourceFile );\r\n\r\n                    viewerOptions = {\r\n                        lineWrapping: true,\r\n                        lineNumbers: true,\r\n                        readOnly: true,\r\n                        mode: codeMirrorModes[ fileExtension[ 1 ] ] || \'xml\'\r\n                    };\r\n\r\n                    return {\r\n                        fileName: sourceFile,\r\n                        code: $templateCache.get( \'/library/directives/\' + component.name + \'/docs/\' +\r\n                            sourceFile ),\r\n                        viewerOptions: viewerOptions\r\n                    };\r\n                } );\r\n            }\r\n\r\n            return {\r\n                name: component.name,\r\n                template: \'/library/directives/\' + component.name + \'/docs/demo.html\',\r\n                docs: \'/library/directives/\' + component.name + \'/docs/readme.md\',\r\n                sources: sources\r\n            };\r\n        } );\r\n\r\n        $scope.components = $scope.components.concat( serviceComponents.map( function ( component ) {\r\n            var sources,\r\n                viewerOptions,\r\n                fileExtension;\r\n\r\n            if ( angular.isArray( component.sources ) ) {\r\n                sources = component.sources.map( function ( sourceFile ) {\r\n\r\n                    fileExtension = fileExtensionRE.exec( sourceFile );\r\n\r\n                    viewerOptions = {\r\n                        lineWrapping: true,\r\n                        lineNumbers: true,\r\n                        readOnly: true,\r\n                        mode: codeMirrorModes[ fileExtension[ 1 ] ] || \'xml\'\r\n                    };\r\n\r\n                    return {\r\n                        fileName: sourceFile,\r\n                        code: $templateCache.get( \'/library/services/\' + component.name + \'/docs/\' +\r\n                            sourceFile ),\r\n                        viewerOptions: viewerOptions\r\n                    };\r\n                } );\r\n            }\r\n\r\n            return {\r\n                name: component.name,\r\n                template: \'/library/services/\' + component.name + \'/docs/demo.html\',\r\n                docs: \'/library/services/\' + component.name + \'/docs/readme.md\',\r\n                sources: sources\r\n            };\r\n        } ) );\r\n    } );\r\n\r\n\r\ndemoApp.controller( \'\' );");
$templateCache.put("/library/directives/projectBrowser/docs/demo.js","/*globals angular*/\r\n\'use strict\';\r\n\r\nvar demoApp = angular.module( \'gme.projectBrowser.demo\', [ \'gme.directives.projectBrowser\' ] );\r\n\r\ndemoApp.controller( \'ProjectBrowserDemoController\', function ( $scope, $log ) {\r\n    $log.debug( \'In ProjectBrowserDemoController\' );\r\n} );");
$templateCache.put("/library/services/projectService/docs/demo.js","/*globals angular*/\r\n\'use strict\';\r\n\r\nvar demoApp = angular.module( \'gme.projectService.demo\', [\r\n    \'gme.services\',\r\n    \'gme.testServices\'\r\n] );\r\n\r\ndemoApp.controller( \'ProjectServiceDemoController\', function ( $scope, $log, $q, dataStoreService, projectService,\r\n    projectServiceTest ) {\r\n    $scope.projects = [];\r\n    $scope.tags = [];\r\n    projectServiceTest.startTest()\r\n        .then( function () {\r\n            projectService.getProjects( \'multi\' )\r\n                .then( function ( results ) {\r\n                    $scope.projects = results;\r\n                }, function ( err ) {\r\n                    console.log( \'Cannot get projects: \' + err );\r\n                } );\r\n\r\n            projectService.getAvailableProjectTags( \'multi\' )\r\n                .then( function ( results ) {\r\n                    $scope.tags = results;\r\n                }, function ( err ) {\r\n                    console.log( \'Cannot get tags: \' + err );\r\n                } );\r\n\r\n\r\n        } );\r\n\r\n\r\n    /*var a = projectServiceTest.startTest();\r\n   a.then(function(){\r\n   console.log(\'start: \' + 1);\r\n   projectService.getProjects(\'multi\').then(function(results){\r\n   console.log(\'ended: \' + 1);\r\n   });\r\n   }, function(){console.log(\'cannot start: \' + 1);});\r\n\r\n   var b = projectServiceTest.startTest();\r\n   b.then(function(){\r\n   console.log(\'start: \' + 2);\r\n   projectService.getProjects(\'multi\').then(function(results){\r\n   console.log(\'ended: \' + 2);\r\n   });\r\n   }, function(){console.log(\'cannot start: \' + 2);});\r\n\r\n   var c = projectServiceTest.startTest();\r\n   c.then(function(){\r\n   console.log(\'start: \' + 3);\r\n   projectService.getProjects(\'multi\').then(function(results){\r\n   console.log(\'ended: \' + 3);\r\n   });\r\n   }, function(){console.log(\'cannot start: \' + 3);});*/\r\n\r\n} );");
$templateCache.put("/library/directives/projectBrowser/docs/readme.md","Depends on `ng-tags-input`.");
$templateCache.put("/library/services/projectService/docs/readme.md","");}]);